datasets::airquality
summary()
summary(airquality)
str(airquality)
?str
knitr::opts_chunk$set(echo = TRUE)
str(airquality)
is.na()
is.na(airquality)
sum(is.na(airquality))
which(is.na(airquality))
colSums(is.na(airquality))
colSums(is.na(airquality))
na <- na.omit(airquality)
str(na)
summary(na)
summary(airquality)
normalize <- function(x) {
return((x-min(x))/(max()-min(x)))
}
air<-normalize(na)
air<-normalize(na)
air<- normalize(na)
air
for (i in 1:nrow(airquality)){
if(is.na(airquality[i, " Ozone"])){
air[i,"Ozone"]<- mean(air[which(airquality[,"Month"]==airquality[i,"Month"]),"Ozone"],na.rm = TRUE)
}
}
`{r}
for (i in 1:nrow(airquality)){
if(is.na(airquality[i, " Ozone"])){
air[i,"Ozone"]<- mean(air[which(airquality[,"Month"]==airquality[i,"Month"]),"Ozone"],na.rm = TRUE)
}
}
for (i in 1:nrow(airquality)){
if(is.na(airquality[i, " Solar.R"])){
air[i,"Solar.R"]<- mean(air[which(airquality[,"Month"]==airquality[i,"Month"]),"Solar.R"],na.rm = TRUE)
}
}
air
Summary(air)
#Monthly mean to Ozone
for (i in 1:nrow(airquality)){
if(is.na(airquality[i, " Ozone"])){
air[i,"Ozone"]<- mean(air[which(airquality[,"Month"]==airquality[i,"Month"]),"Ozone"],na.rm = TRUE)
}
}
#Monthly mean to solar. R
for (i in 1:nrow(airquality)){
if(is.na(airquality[i, " Solar.R"])){
air[i,"Solar.R"]<- mean(air[which(airquality[,"Month"]==airquality[i,"Month"]),"Solar.R"],na.rm = TRUE)
}
}
```{r}
Summary(air)
summary(air)
air<- airquality
#Monthly mean to Ozone
for (i in 1:nrow(air)){
if(is.na(air[i, " Ozone"])){
air[i,"Ozone"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Ozone"],na.rm = TRUE)
}
}
for (i in 1:nrow(air)){
if(is.na(air[i, " Ozone"])){
air[i,"Ozone"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Ozone"],na.rm = TRUE)
}
}
air= airquality
#Monthly mean to Ozone
for (i in 1:nrow(air)){
if(is.na(air[i, " Ozone"])){
air[i,"Ozone"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Ozone"],na.rm = TRUE)
}
}
summary(air)
for (i in 1:nrow(air)){
if(is.na(air[i, "Ozone"])){
air[i,"Ozone"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Ozone"],na.rm = TRUE)
}
}
for (i in 1:nrow(air)){
if(is.na(air[i, " Solar.R"])){
air[i,"Solar.R"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Solar.R"],na.rm = TRUE)
}
}
#Monthly mean to solar. R
for (i in 1:nrow(air)){
if(is.na(air[i, "Solar.R"])){
air[i,"Solar.R"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Solar.R"],na.rm = TRUE)
}
}
summary(air)
normalize <- function(x) {
return((x-min(x))/(max()-min(x)))
}
air<- normalize(na)
air
str(air)
air<- normalize(air)
normalize <- function(x) {
return((x-min(x))/(max()-min(x)))
}
air<- normalize(air)
normalize <- function(x) {
return((x-min(x))/(max(x)-min(x)))
}
air<- normalize(air)
str(air)
normalize <- function(x) {
return((x-min(x))/(max(x)-min(x)))
}
air<- normalize(air)
str(air)
normalize<- function(x) {
return((x-min(x))/(max(x)-min(x)))
}
air<- normalize(air)
str(air)
normalize(air)
air
air= airquality
#Monthly mean to Ozone
for (i in 1:nrow(air)){
if(is.na(air[i, "Ozone"])){
air[i,"Ozone"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Ozone"],na.rm = TRUE)
}
}
#Monthly mean to solar. R
for (i in 1:nrow(air)){
if(is.na(air[i, "Solar.R"])){
air[i,"Solar.R"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Solar.R"],na.rm = TRUE)
}
}
summary(air)
normalize(air)
air
summary(air)
normalize(air, ranage = c(0,1))
normalize(air, range = c(0,1))
normalize(air,method = "standardize", range = c(0,1))
normal<- function(x){
return((x-min(x))/(max(x)-min(x)))
}
air<- normal(air)
str(air)
library(ggplot2)
ggplot(air, aes(x=variety, y=note, fill=treatment)) +
geom_boxplot() +
facet_wrap(~variety, scale="free")
ggplot(air, aes(Ozone, Solar.R, Wind, Temp))
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(air[,i], main=names(air)[i],
col = c("purple"))
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(air[,i], main=names(air)[i],
col = c("purple"))
}
par(mfrow=c(1,4))
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(air[,i], main=names(air)[i],
col = c("purple"))
par(mfrow=c(1,4)
mknknnk
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(air[,i], main=names(air)[i],
col = c("purple"))
}
par(mfrow=c(1,4))
for(i in 1:4) {
hist(air[,i], main=names(air)[i],
col = c("orange"))
}
par(mfrow=c(1,4))
for(i in 1:4) {
hist(air[,i], main=names(air)[Ozone, Solar.R, Wind,Temp],
col = c("orange"))
}
par(mfrow=c(1,4))
for(i in 1:4) {
hist(air[,i], main=names(air)[Ozone+Solar.R+ Wind+Temp],
col = c("orange"))
}
par(mfrow=c(1,4))
for(i in 1:4) {
hist(air[,i], main=names(air)["Ozone","Solar.R", "Wind","Temp"],
col = c("orange"))
}
par(mfrow=c(1,4))
for(i in 1:4) {
hist(air[,i], main=names(air)[i],
col = c("orange"))
}
par(mfrow=c(1,4))
for(i in 1:4) {
hist(air[,i], main=names(oli)[i],
col = c("orange"))
}
par(mfrow=c(1,4))
for(i in 1:4) {
hist(air[,i], main=names(air)[i],
col = c("orange"))
}
ggplot(air, aes(Wind, Ozone)) + geom_histogram( bins = 15)
ggplot(air, aes(Wind, Ozone)) + geom_histogram()
plot(Ozone, Solar.R, main = "Ozone vs Solar radiation",
xlab = "Ozone ", ylab = "SOlar radiation",
pch = 19, frame = FALSE)
plot(Ozone, Solar.R, main = "Ozone vs Solar radiation",
xlab = "Ozone", ylab = "SOlar radiation",
pch = 19, frame = FALSE)
plot(Ozone, Solar.R, main = "Ozone vs Solar radiation",
xlab = "Ozone", ylab = "SOlar radiation",
pch = 19, frame = FALSE)
plot(air)
plot(air$Ozone, air$Solar.R, pch=21, bg=c("red","green3","blue")[unclass(air$Month)], main="Edgar Anderson's Iris Data")
plot(air$Ozone, air$Solar.R, pch=21, bg=c("red","green","blue")[unclass(air$Month)], main="Edgar Anderson's Iris Data")
plot(air$Ozone, air$Solar.R, pch=21, color =c("red","green","blue")[unclass(air$Month)], main="Edgar Anderson's Iris Data")
plot(air$Ozone, air$Solar.R, pch=21, col =c("red","green","blue")[unclass(air$Month)], main="Edgar Anderson's Iris Data")
warning()
warnings()
plot(x = air$Ozone.Length, y = air$Solar.R, frame = FALSE,
xlab = "Sepal Length", ylab = "Sepal Width",
pch = 19, col =  "#0073C2FF")
plot(x = air$Ozone.Length, y = air$Solar.R, frame = FALSE,
xlab = "Sepal Length", ylab = "Sepal Width",
col =  "#0073C2FF")
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
xlab = "Sepal Length", ylab = "Sepal Width",
col =  "#0073C2FF")
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
+      xlab = "Ozone", ylab = "Solar Radiation",
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
xlab = "Sepal Length", ylab = "Sepal Width",
col =  "#0073C2FF")
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
+      xlab = "Ozone", ylab = "Solar Radiation",
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
+      xlab ="Ozone", ylab = "Solar Radiation",
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
+      xlab ="Ozone", ylab = "Solar Radiation",
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
+      xlab ="Ozone", ylab = "Solar Radiation",
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
+      xlab ="Ozone", ylab = "Solar Radiation",
+       col ="#0073C2FF")
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
xlab = "Sepal Length", ylab = "Sepal Width",
col =  "#0073C2FF")
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
+      xlab = "Ozone", ylab = "Solar radiation",
+       col =  "#0073C2FF")
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
xlab = "Ozone", ylab = "Solar radiation",
col =  "#0073C2FF")
plot(x = air$Ozone, y = air$Solar.R, frame = FALSE,
xlab = "Ozone", ylab = "Solar radiation",
col =  "#0073C2FF")
plot(x = air$Ozone, y = air$Wind, frame = FALSE,
xlab = "Ozone", ylab = "Wind",
col =  "#0073C2FF")
plot(x = air$Ozone, y = air$Temp, frame = FALSE,
xlab = "Ozone", ylab = "Temperature",
col =  "#0073C2FF")
plot(x = air$Ozone, y = air, frame = FALSE,
xlab = "Ozone", ylab = "Wind",
col =  "#0073C2FF")
plot(Ozone, data = air frame = FALSE,
xlab = "Ozone", ylab = "Wind",
col =  "#0073C2FF")
cor(air[.1:4])
cor(air[,1:4])
.
cor(air[.1:4])
ggcorrplot(cor(air[,1:4]), method = "circle")
cor(air[.1:4])
corrplot(cor(air[,1:4]), method = "circle")
library(corrplot)
cor(air[.1:4])
corrplot(cor(air[,1:4]), method = "circle")
corrplot(cor(air[,1:4]), method = "shade")
corrplot(cor(air[,1:4]), method = "pie")
plot(air[,1:4])
plot(air[,1:4])
plot(air[,1:4])
plot(air[,1:4])
knitr::opts_chunk$set(echo = TRUE)
datasets::airquality
str(airquality)
colSums(is.na(airquality))
air= airquality
#Monthly mean to Ozone
for (i in 1:nrow(air)){
if(is.na(air[i, "Ozone"])){
air[i,"Ozone"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Ozone"],na.rm = TRUE)
}
}
#Monthly mean to solar. R
for (i in 1:nrow(air)){
if(is.na(air[i, "Solar.R"])){
air[i,"Solar.R"]<- mean(air[which(air[,"Month"]==air[i,"Month"]),"Solar.R"],na.rm = TRUE)
}
}
summary(air)
normal<- function(x){
return((x-min(x))/(max(x)-min(x)))
}
air<- normal(air)
str(air)
library(ggplot2)
library(dplyr)
library(tidyverse)\
plot(air[,1:4])
plot(air[,1:4], col = TRUE)
plot(air[,1:4], col = blues9)
plot(air[,1:4], col = "blues"+"red")
plot(air[,1:4], col = "blues")
plot(air[,1:4], col = "blue")
plot(air[,1:4], col = 1:4)
plot(air[,1:4], col = c[,1:4])
plot(air[,1:4], col = air[,1:4])
plot(air[,1:4], col = air)
plot(air[,1:4])
modelLm1<- lm(Ozone~ Solar.R, data = air)
print(modelLm1)
summary(modelLm1)
summary(modelLm1)
plot(modelLm1)
modelLm2<- lm(Ozone~,data= air)
modelLm2<- lm(Ozone~.,data= air)
print(modelLm2)
modelLm2<- lm(Ozone~Wind,data= air)
print(modelLm2)
modelLm2<- lm(Ozone~Wind,data= air)
print(modelLm2)
summary(modelLm2)
plot(air$Wind, resid(modelLm2),
+     ylab="Residuals", xlab="Waiting Time",
+     main="Old Faithful Eruptions")
resid(modelLm2)
par(mfrow = c(2,2))
plot(modelLm2)
```{r}
modelLm3<- lm(Ozone~Temp,data= air)
print(modelLm3)
par(mfrow = c(2,2))
plot(modelLm3)
summary(modelLm3)
predy <- predict(modelLm3, air, interval="predict", level=.95)
predy
summary(predy)
pred1 <- predict(modelLm3, air, interval="predict", level=.95) + predict(modelLm1, air, interval="predict", level=.95) + predict(modelLm2, air, interval="predict", level=.95)
summary(predy)
conf <- predict(modelLm3, air, interval="confidence", level=.95) + predict(modelLm1, air, interval="confidence", level=.95) + predict(modelLm2, air, interval="confidence", level=.95)
summary(conf)
conf[1]== pred1[1]
conf== pred1
predy <- predict(modelLm3, air, interval="predict", level=.95) + predict(modelLm1, air, interval="predict", level=.95) + predict(modelLm2, air, interval="predict", level=.95)
summary(predy)
conf[1]== predy[1]
